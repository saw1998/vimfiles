extends c

##
## Preprocessor
# #include <...>
snippet incc
	#include <${1:iostream}>
snippet binc
	#include <boost/${1:shared_ptr}.hpp>
##
## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
# std::list
snippet list
	std::list<${1:T}> ${2};
# std::set
snippet set
	std::set<${1:T}> ${2};
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
##
## STL smart pointers
# std::shared_ptr
snippet msp
	std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
snippet amsp
	auto ${1} = std::make_shared<${2:T}>(${3});
# std::unique_ptr
snippet mup
	std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
snippet amup
	auto ${1} = std::make_unique<${2:T}>(${3});
##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
	
##	
## custom
# debug
snippet kmp
	void computeLSP(string pat,vector<int>& lsp){
		int len=0;
		lsp[0]=0;
		int i=1;
		while(i<pat.size()){
			if(pat[i]==pat[len]){
				len++;
				lsp[i]=len;
				i++;
			}
			else{
				if(len!=0){
					len = lsp[len-1];
				}
				else{
					lsp[i]=0;
					i++;
				}
			}
		}
	}

	void KMP(string pattern,string text){
		int m=pattern.size();
		int n=text.size();
		vector<int> lsp(m);
		computeLSP(pattern,lsp);
		int i=0;
		int j=0;
		while(i<n){
			if(pattern[j]==text[i]){
				i++;
				j++;
			}
			if(j==m){
				cout<<"Pattern found at index "<<i-j<<endl;
				j=lsp[j-1];
			}
			else if(i<n && pattern[j]!=text[i]){
				if(j!=0){
					j=lsp[j-1];
				}
				else 
					i++;
			}
		}
	}

	$0

snippet chinese
	int chinese(vector<int> a,vector<int> m){
		long long sol=0,pd=1;
		vector<int> inv(a.size());
		for(int i=0;i<m.size();i++) pd*=m[i];
		for(int i=0;i<a.size();i++){
			int x,y;
			int g= extended_gcd(m[i],pd/m[i],x,y);
			if(g!=1) return -1;
			if(x<0) x+=pd/m[i];
			inv[i] = x;
		}
		for(int i=0;i<a.size();i++){
			sol+=a[i]*pd*inv[i]/m[i];
		}
		if(sol<0) sol+=pd;
		sol%=pd;
		return sol;
		// x = a1 (mod m1)
		// x = a2 (mod m2)
		//
		// bi = M/mi   M=m1 * m2 * ...
		// bi' = bi^(-1) mod(mi)
		//
		// sol = summation ( ai * bi * bi' ) from 1 to n
	}

	$0

snippet extended_gcd
	int extended_gcd(int a,int b,int &x,int &y){
		if(!b){
			x=1,y=0;
			return a;
		}
		int x1,y1;
		int g  = extended_gcd(b,a%b,x1,y1);
		x = y1;
		y = x1 - y1*(a/b);
		return g;
	}
	
	$0

snippet debugonly
	#ifndef ONLINE_JUDGE
	#define debug(x...) deb(x)
	#define debugg(x...) debb(x)
	#else
	#define debug(x...) 
	#define debugg(x...)
	#endif
	#define ll long long 
	#define vi vector<int>
	#define vvi vector<vector<int>>
	#define vll vector<long long>
	#define pii pair<int,int>
	const double PI = acos(-1);
	const ll md=1000000007;
	inline void add(int &a, int b){a += b;if(a >= md)a -= md;}
	inline int mul(int a, int b) {return (ll)a * b % md;}


snippet debugsolve
	#include<bits/stdc++.h>
	using namespace std; 
	#ifdef ONLINE_JUDGE
	#define debug(x...)
	#define debugg(x...) 
	#endif
	#define vi vector<int>
	#define pii pair<int,int>
	#define vvi vector<vector<int>>
	#define vll vector<long long>
	#define ll long long 
	const double PI = acos(-1);
	const ll md=1000000007;
	inline void add(int &a, int b){a += b;if(a >= md)a -= md;}
	inline int mul(int a, int b) {return (ll)a * b % md;}

	void solve(){
		$0
	}

	int main(){
		cin.tie(nullptr), ios::sync_with_stdio(false);
		int t=1;
		cin>>t;
		while(t--){
			solve();
		}
	}	

snippet debug
	#include<bits/stdc++.h>
	using namespace std; 
	#ifdef ONLINE_JUDGE
	#define debug(x...) 
	#define debugg(x...)
	#endif
	#define vi vector<int>
	#define pii pair<int,int>
	#define vll vector<long long>
	#define vvi vector<vector<int>>
	#define ll long long 
	const ll md=1000000007;
	const double PI = acos(-1);
	inline void add(int &a, int b){a += b;if(a >= md)a -= md;}
	inline int mul(int a, int b) {return (ll)a * b % md;}

	int main(){
		cin.tie(nullptr), ios::sync_with_stdio(false);	
		$0
	}	

snippet debugjam
	#include<bits/stdc++.h>
	using namespace std; 
	#ifdef ONLINE_JUDGE
	#define debug(x...) 
	#define debugg(x...) 
	#endif
	#define vi vector<int>
	#define pii pair<int,int>
	#define vll vector<long long>
	#define vvi vector<vector<int>>
	#define ll long long 
	const double PI = acos(-1);
	const ll md=1000000007;
	inline void add(int &a, int b){a += b;if(a >= md)a -= md;}
	inline int mul(int a, int b) {return (ll)a * b % md;}
	int test=1; 

	void solve(){
		$0
	}

	int main(){
		cin.tie(nullptr), ios::sync_with_stdio(false);
		int t=1;
		cin>>t;
		while(t--){
			solve();
		}
	}	

snippet dsu
	struct dsu{
		vector<int> p,r;

		dsu(int n){
			p.resize(n);
			r.assign(n,0);
			for(int i=0;i<n;i++){
				p[i]=i;
			}
		}

		int getParent(int a){
			return p[a]=(p[a]==a?a:getParent(p[a]));
		} 

		void unionSet(int a,int b){
			a = getParent(a);
			b = getParent(b);
			if(r[a]==r[b]){
				r[a]++;
			}
			if(r[a]>r[b]){
				p[b]=a;
			}
			else{
				p[a]=b;
			}
		}
	};

snippet sieve
	const int Np = 1e6 + 10;
	bool mark[Np];
	vll prime = {2};

	void sieve() {
		for (int i = 3; i * i < Np; i += 2) {
			if (!mark[i]) {
				for (int j = i * i; j < Np; j += 2 * i)
					mark[j] = 1;
			}
		}
		for (int i = 3; i < Np; i += 2)
			if (!mark[i])
				prime.push_back (i);
	}


snippet	segtree
	struct item{
		int m,c;$0    //member,count
	};

	struct segtree{
		int size;
		vector<item> values;

		item NEUTRAL_ELEMENT = {INT_MAX , 0};

		item merge(item a,item b){
			if(a.m < b.m) return a;
			if(a.m > b.m) return b;
			return {a.m, a.c+b.c};
		}

		item single(int v){
			return {v,1};
		}

		void init(int n){
			size=1;
			while(size<n) size<<=1;
			values.resize(2*size);
		}

		void build(vector<int>&a,int x,int lx,int rx){
			if(rx-lx ==1){
				if(lx<(int)a.size()){
					values[x] = single(a[lx]);
				}
				return;
			}
			int m = (lx+rx)/2;
			build(a,2*x+1,lx,m);
			build(a,2*x+2,m,rx);
			values[x] = merge(values[2*x+1],values[2*x+2]);
		}
		void build(vector<int>&a){
			build(a,0,0,size);
		}

		void set(int i,int v,int x,int lx,int rx){
			if(rx-lx==1){
				values[x] = single(v);
				return;
			}
			int m = (lx+rx)/2;
			if(i<m){
				set(i,v,2*x+1,lx,m);
			}
			else{
				set(i,v,2*x+2,m,rx);
			}
			values[x] = merge(values[2*x+1],values[2*x+2]);
		}

		void set(int i,int v){
			set(i,v,0,0,size);
		}

		item get(int l,int r,int x,int lx,int rx){
			if(lx>=r || l>=rx) return NEUTRAL_ELEMENT;
			if(lx>=l && rx<=r) return values[x];
			int m = (lx+rx)/2;
			item s1 = get(l,r,2*x+1,lx,m);
			item s2 = get(l,r,2*x+2,m,rx);
			return merge(s1,s2);
		}
		item get(int l,int r){
			return get(l,r,0,0,size);
		}
	};
	
snippet point3d
	template <typename T>
	struct point3d{
		T i,j,k;
		point3d():i(0),j(0),k(0){};
		point3d(int i,int j,int k=0):i(i),j(j),k(k){}
		point3d& operator+=(const point3d<T> &t){
			i+=t.i;
			j+=t.j;
			k+=t.k;
			return *this;
		}
		point3d& operator-=(const point3d<T> &t){
			i-=t.i;
			j-=t.j;
			k-=t.k;
			return *this;
		}
		template <typename TT>
			point3d& operator*=(TT a){
				i*=a;
				j*=a;
				k*=a;
				return *this;
			}
		template <typename TT>
			point3d& operator/=(TT a){
				i/=a;
				j/=a;
				k/=a;
				return *this;
			}
		point3d operator+(const point3d<T> &t) const{
			point3d temp = point3d(*this);
			return temp+=t;
		}
		point3d operator-(const point3d<T> &t) const{
			return point3d(*this)-=t;
		}
		template <typename TT>
		point3d operator*=(const TT &t) const{
			return point3d(*this)*=t;
		}
		template <typename TT>
		point3d operator/=(const TT &t) const{
			return point3d(*this)/=t;
		}
		T dot(const point3d<T>& t)const{
			T ans=i*t.i+j*t.j+k*t.k;
			return ans;
		}
		point3d<T> cross(const point3d<T> &t) const{
			point3d ans(j*t.k-k*t.j,k*t.i-i*t.k,i*t.j-j*t.i);
			return ans;
		}
		double abs() const{
			double a = sqrt((*this).dot(*this));
			return a;
		}
	};
	template <typename TT,typename T>
	point3d<T> operator*(TT a,point3d<T> b){
		return b*a;
	}
	template <typename T>
	T dot(point3d<T> &a,point3d<T>&b){
		return (a.i*b.i + a.j*b.j + a.k*b.k);
	}
	template <typename T>
	point3d<T> cross(point3d<T>&a,point3d<T>&b){
		return point3d<T>(
					a.j*b.k - a.k*b.j,
					a.k*b.i - a.i*b.k,
					a.i*b.j - a.j*b.i
				);
	}
	template <typename T>
	double proj(point3d<T>&a,point3d<T>&b){
		return dot(a,b)/b.abs();
	}
	template <typename T>
	double angle(point3d<T>&a,point3d<T>&b){
		return acos(dot(a,b))/(a.abs()*b.abs());
	}
	template <typename T>
	double triple(point3d<T> &a,point3d<T> &b,point3d<T> &c){
		return dot(a,cross(b,c));
	}
	template <typename T>                                 //planes of type
	point3d<T> intersect(point3d<T> &a1, point3d<T> &n1,   //r.n1 = a1.n1
						 point3d<T> &a2, point3d<T> &n2,   //r.n2 = a2.n2
						 point3d<T> &a3, point3d<T> &n3   //r.n3 = a3.n3  returns point of intersection
						 ){
		point3d<T> i(n1.i, n2.i, n3.i);
		point3d<T> j(n1.j, n2.j, n3.j);
		point3d<T> k(n1.k, n2.k, n3.k); 
		point3d<T> d(dot(a1, n1), dot(a2, n2), dot(a3, n3));
		return point3d<T>(triple(d, j, k),
						  triple(i, d, k),
						  triple(i, j, d)) / triple(n1, n2, n3);
	}
	template <typename T>                                 //line of types 
	point3d<T> intersect(point3d<T> &a1,point3d<T> &n1,   //r = a1 + t*n1
						 point3d<T> &a2,point3d<T> &n2    //r = a2 + t*n2 returns point of intersection
						 ){
		T per1 = (cross(a2-a1,n2)).k;
		T per2 = (cross(n1,n2)).k;
		return a1+per1/per2 * n1;
	}
	//point of intersecion betn line and circle
	void intersect(double r,          //radius of circle centered at origin
				double a,double b,double c, // equation of line in the form of "ax + by + c = 0"
				vector<point3d<double>> &intersections  //for returning the point of intersection
			){
		double EPS = 1e-6;
		double x0 = -a*c/(a*a+b*b), y0 = -b*c/(a*a+b*b);
		if (c*c > r*r*(a*a+b*b)+EPS){
			//puts ("no points");
			return;
		}
		else if (abs (c*c - r*r*(a*a+b*b)) < EPS) {
			//puts ("1 point");
			cout << x0 << ' ' << y0 << '\n';
			point3d<double> ans(x0,y0,0);
			intersections.push_back(ans);
			return;
		}
		else {
			double d = r*r - c*c/(a*a+b*b);
			double mult = sqrt (d / (a*a+b*b));
			double ax, ay, bx, by;
			ax = x0 + b * mult;
			bx = x0 - b * mult;
			ay = y0 - a * mult;
			by = y0 + a * mult;
			//puts ("2 points");
			point3d<double> ans1(ax,ay,0),ans2(bx,by,0);
			intersections.push_back(ans1);
			intersections.push_back(ans2);
			return;
		}
	}
snippet fft
	using cd = complex<double>;
	using cd = complex<double>;
	void fft(vector<cd>& a,bool invert){
		int n=a.size();
		if(n==1)
			return;
		vector<cd> a0(n/2),a1(n/2);
		for(int i=0;2*i<n;i++){
			a0[i]=a[2*i];
			a1[i]=a[2*i+1];
		}
		fft(a0,invert);
		fft(a1,invert);

		double ang = 2*PI/n * (invert?-1:1);
		cd w(1),wn(cos(ang),sin(ang));
		for(int i=0;2*i<n;i++){
			a[i] = a0[i]+w*a1[i];
			a[i+n/2] = a0[i]+w*a1[i];
			if(invert){
				a[i]/=2;
				a[i+n/2]/=2;
			}
			w*=wn;
		}
	}

	vector<int> multiply(vector<int> const&a,vector<int> const & b){
		vector<cd> fa(a.begin(),a.end()),fb(b.begin(),b.end());
		int n=1;
		while(n<a.size()+b.size())
			n<<=1;
		fa.resize(n);
		fb.resize(n);

		fft(fa,false);
		fft(fb,false);
		for(int i=0;i<n;i++){
			fa[i]*=fb[i];
		}
		fft(fa,true);
		vector<int> result(n);
		for(int i=0;i<n;i++){
			result[i]=round(fa[i].real());
		}
		return result;
	}

##
## Class
# class
snippet cl
	/*! \class $1
	 *  \brief ${3:Brief class description}
	 *
	 *  ${4:Detailed description}
	 */
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		virtual ~$1();

	protected:
		m_${5}; /*!< ${6:Member description} */
	};
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
# member function implementation without parameters
snippet dmfun0
	/*! \brief ${4:Brief function description here}
	 *
	 *  ${5:Detailed description}
	 *
	 * \return ${6:Return parameter description}
	 */
	${3:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}() {
		${0}
	}
# member function implementation with one parameter
snippet dmfun1
	/*! \brief ${6:Brief function description here}
	 *
	 *  ${7:Detailed description}
	 *
	 * \param $4 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${5:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {
		${0}
	}
# member function implementation with two parameter
snippet dmfun2
	/*! \brief ${8:Brief function description here}
	 *
	 *  ${9:Detailed description}
	 *
	 * \param $4 ${10:Parameter description}
	 * \param $6 ${11:Parameter description}
	 * \return ${12:Return parameter description}
	 */
	${7:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
snippet ans
	namespace {
		${0}
	}
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
# std::cin
snippet cin
	std::cin >> ${1};
##
## Casts
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
# const
snippet cca
	const_cast<${1:unsigned}>(${2:expr})${3}
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}};
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	};
# snippets exception
snippet try
	try {

	}catch(${1}) {

	}
snippet af auto function
	auto ${1:name}(${2}) -> ${3:void}
	{
		${0}
	};
